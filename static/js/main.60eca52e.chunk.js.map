{"version":3,"sources":["component/WeatherCard.js","component/WeatherApp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermood","name","speed","country","sunset","date","Date","time","getHours","getMinutes","useEffect","className","toLocaleString","WeatherApp","inputVlaue","setInputValue","setTempInfo","getInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","id","value","onChange","event","target","autoFocus","placeholder","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60eca52e.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\nconst WeatherCard = ({tempInfo}) => {\r\n    const [weatherState,setWeatherState]=useState(\"\");\r\n    const {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset\r\n    }=tempInfo;\r\n\r\n    let sec=sunset;\r\n    let date=new Date(sec*1000);\r\n    let time=`${date.getHours()}:${date.getMinutes()}`;\r\n\r\n    useEffect(() => {\r\n        if(weathermood){\r\n            switch (weathermood) {\r\n                case \"Clouds\":setWeatherState(\"wi-day-cloudy\");\r\n                    \r\n                    break;\r\n                    case \"Haze\":setWeatherState(\"wi-fog\");\r\n                    \r\n                    break;\r\n                    case \"Clear\":setWeatherState(\"wi-day-sunny\");\r\n                    \r\n                    break;\r\n            \r\n                default:\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood])\r\n    return (\r\n        <>\r\n          <article className=\"widget\">\r\n                <div className=\"weatherIcon\">\r\n                <i className={`wi ${weatherState}`}></i>\r\n                </div>\r\n                    <div className=\"weatherInfo\">\r\n                    <div className=\"temperature\">\r\n                    <span>{temp}&deg;</span>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                    <div className=\"weatherCondition\">{weathermood}</div>\r\n                    <div className=\"place\">{name},{country}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-sunset\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {time}PM <br />\r\n                                Sunset\r\n                            </p>\r\n                        </div>\r\n\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-humidity\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {humidity} <br />\r\n                                Humidity\r\n                            </p>\r\n                        </div>\r\n\r\n                        \r\n                    </div>\r\n                    <div className=\"weather-extra-info\">\r\n                    <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-rain\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {pressure} <br />\r\n                                Pressure\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"two-sided-section\">\r\n                            <p>\r\n                                <i className={\"wi wi-strong-wind\"}></i>\r\n                            </p>\r\n                            <p className=\"extra-info-leftside\">\r\n                                {speed}<br />\r\n                                Speed\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n            </article>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React,{useState,useEffect} from 'react';\r\nimport \"./style.css\";\r\nimport WeatherCard from './WeatherCard';\r\n\r\nconst WeatherApp = () => {\r\n    const [inputVlaue,setInputValue]=useState(\"ghaziabad\");\r\n    const [tempInfo,setTempInfo]=useState({});\r\n    const getInfo=async()=>{\r\n        try {\r\n            let url=`https://api.openweathermap.org/data/2.5/weather?q=${inputVlaue}&units=metric&appid=5933976440c409685484ffc4ac1340e5`;\r\n            let res=await fetch(url);\r\n            let data=await res.json();\r\n            const {temp,humidity,pressure}=data.main;\r\n            const {main:weathermood}=data.weather[0];\r\n            const {name}=data;\r\n            const {speed}=data.wind;\r\n            const {country,sunset}=data.sys;\r\n\r\n            const myWeatherInfo={\r\n                temp,humidity,pressure,\r\n                weathermood,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset\r\n            }\r\n            // console.log(myWeatherInfo);\r\n            setTempInfo(myWeatherInfo);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getInfo();\r\n    }, [])\r\n    return (\r\n        <>\r\n          <div className=\"wrap\">\r\n              <div className=\"search\">\r\n                  <input type=\"search\" \r\n                  id=\"search\"\r\n                  className=\"searchTerm\" \r\n                  value={inputVlaue}\r\n                  onChange={(event)=>{setInputValue(event.target.value)}}\r\n                  autoFocus\r\n                  placeholder=\"🔍search...\"/>\r\n                  <button className=\"searchButton\"\r\n                  onClick={getInfo}\r\n\r\n                  >Search</button>\r\n\r\n              </div>\r\n              </div> \r\n            <WeatherCard tempInfo={tempInfo}/>            \r\n        </>\r\n    )}\r\nexport default WeatherApp;\r\n","\n\nimport WeatherApp from './component/WeatherApp';\nfunction App() {\n  return (\n    <>\n      <WeatherApp/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}